{"name":"Date|Time","description":"Query written by Journey Team. Contains a Date Dimension, a Time Dimension, and Refresh Information.","version":"1.0","culture":"en-US","modifiedTime":"2021-04-09T18:54:38.4293157+00:00","pbi:mashup":{"fastCombine":false,"allowNativeQueries":false,"queriesMetadata":{"Time_Dim":{"queryId":"3c0074d5-8023-4db7-a338-4bb97d9bb2b7","queryName":"Time_Dim","queryGroupId":"02a394db-c514-4acd-829b-a0946840d68a","loadEnabled":true},"Refresh Info":{"queryId":"f51b70ca-de8b-4a6d-88f9-01f9b6ba51b0","queryName":"Refresh Info","queryGroupId":"02a394db-c514-4acd-829b-a0946840d68a","loadEnabled":true},"Local Time Zone":{"queryId":"1e332bf5-756b-411b-8d88-e1454601a0d3","queryName":"Local Time Zone","queryGroupId":"02a394db-c514-4acd-829b-a0946840d68a"},"Last Refresh Local":{"queryId":"c64a7323-b857-4fae-8c35-73588fd9bba8","queryName":"Last Refresh Local","queryGroupId":"02a394db-c514-4acd-829b-a0946840d68a"},"Date_Dim":{"queryId":"f76e98cb-98e4-4c65-9b35-26232fd25dea","queryName":"Date_Dim","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf","loadEnabled":true},"Start Date":{"queryId":"4358fb8a-fc1e-473d-aac4-f9058d569577","queryName":"Start Date","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf"},"End Date":{"queryId":"e23c41e2-0753-44e5-8240-e5233156a567","queryName":"End Date","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf"},"Years Back":{"queryId":"eca035c6-2a94-4142-a548-ed19fa36787a","queryName":"Years Back","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf"},"Years Forward":{"queryId":"936fbd8b-f5fd-4eac-be5b-af7acc6a6d2c","queryName":"Years Forward","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf"},"Fiscal Year Start Month":{"queryId":"1ec5bc07-7e06-4d48-855d-7c6936f61d83","queryName":"Fiscal Year Start Month","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf"},"Dynamic Start Date":{"queryId":"d23d8479-90e5-459f-8b12-ee782a25175f","queryName":"Dynamic Start Date","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf"},"Dynamic End Date":{"queryId":"8e731f5f-a9c6-4374-935f-713f3f726fa2","queryName":"Dynamic End Date","queryGroupId":"16c59665-03d8-41d7-b6fe-3da6417449cf"},"TOPN":{"queryId":"355c0537-16ae-45d3-a97a-9fe17fefc3b3","queryName":"TOPN","queryGroupId":"c1437975-acc3-420d-9534-0d1af5ee9e0e"}},"document":"section Section1;\r\nshared Time_Dim = let\r\n  // This Time Dimension was sourced largely from the time dimensions freely provided by FourMoo and Radacad. Generous people are awesome people.\r\n  Source = List.Times(#time(0, 0, 0), 84600, #duration(0, 0, 0, 1)),\r\n  #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\r\n  #\"Renamed Columns\" = Table.RenameColumns(#\"Converted to Table\", {{\"Column1\", \"Time\"}}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Time\", type time}}),\r\n  #\"Start of Hour\" = Table.AddColumn(#\"Changed column type\", \"Start of Hour\", each Time.StartOfHour([Time]), type time),\r\n  #\"End of Hour\" = Table.AddColumn(#\"Start of Hour\", \"End of Hour\", each Time.EndOfHour([Time]), type time),\r\n  Hour = Table.AddColumn(#\"End of Hour\", \"Hour\", each Time.Hour([Time]), type number),\r\n  Minute = Table.AddColumn(Hour, \"Minute\", each Time.Minute([Time]), type number),\r\n  Second = Table.AddColumn(Minute, \"Second\", each Time.Second([Time]), type number),\r\n  #\"AM/PM\" = Table.AddColumn(Second, \"AM/PM\", each if [Hour] <= 11 then \"AM\" else \"PM\", type text),\r\n  #\"Hour Label\" = Table.AddColumn(#\"AM/PM\", \"Hour Label\", each \"0\" & Text.From([Hour], \"en-NZ\"), type text),\r\n  #\"Extracted Last Characters\" = Table.TransformColumns(#\"Hour Label\", {{\"Hour Label\", each Text.End(_, 2), type text}}),\r\n  #\"Minute Label\" = Table.AddColumn(#\"Extracted Last Characters\", \"Minute Label\", each \"0\" & Text.From([Minute], \"en-NZ\"), type text),\r\n  #\"Extracted Last Characters1\" = Table.TransformColumns(#\"Minute Label\", {{\"Minute Label\", each Text.End(_, 2), type text}}),\r\n  #\"Inserted Prefix2\" = Table.AddColumn(#\"Extracted Last Characters1\", \"Second Label\", each \"0\" & Text.From([Second], \"en-NZ\"), type text),\r\n  #\"Extracted Last Characters2\" = Table.TransformColumns(#\"Inserted Prefix2\", {{\"Second Label\", each Text.End(_, 2), type text}}),\r\n  #\"Hour Bin 12\" = Table.AddColumn(#\"Extracted Last Characters2\", \"Hour Bin 12\", each Number.Mod([Hour], 12), type number),\r\n  #\"Hour Bin 8\" = Table.AddColumn(#\"Hour Bin 12\", \"Hour Bin 8\", each Number.IntegerDivide([Hour], 8), Int64.Type),\r\n  #\"Hour Bin 6\" = Table.AddColumn(#\"Hour Bin 8\", \"Hour Bin 6\", each Number.IntegerDivide([Hour], 6), Int64.Type),\r\n  #\"Hour Bin 4\" = Table.AddColumn(#\"Hour Bin 6\", \"Hour Bin 4\", each Number.IntegerDivide([Hour], 4), Int64.Type),\r\n  #\"Hour Bin 3\" = Table.AddColumn(#\"Hour Bin 4\", \"Hour Bin 3\", each Number.IntegerDivide([Hour], 3), Int64.Type),\r\n  #\"Hour Bin 2\" = Table.AddColumn(#\"Hour Bin 3\", \"Hour Bin 2\", each Number.IntegerDivide([Hour], 2), Int64.Type),\r\n  #\"Minute Bin 30\" = Table.AddColumn(#\"Hour Bin 2\", \"Minute Bin 30\", each Number.IntegerDivide([Minute], 30), Int64.Type),\r\n  #\"Multiplied Column\" = Table.TransformColumns(#\"Minute Bin 30\", {{\"Minute Bin 30\", each _ * 30, type number}}),\r\n  #\"Minute Bin 15\" = Table.AddColumn(#\"Multiplied Column\", \"Minute Bin 15\", each Number.IntegerDivide([Minute], 15), Int64.Type),\r\n  #\"Multiplied Column1\" = Table.TransformColumns(#\"Minute Bin 15\", {{\"Minute Bin 15\", each _ * 15, type number}}),\r\n  #\"Minute Bin 10\" = Table.AddColumn(#\"Multiplied Column1\", \"Minute Bin 10\", each Number.IntegerDivide([Minute], 10), Int64.Type),\r\n  #\"Multiplied Column2\" = Table.TransformColumns(#\"Minute Bin 10\", {{\"Minute Bin 10\", each _ * 10, type number}})\r\nin\r\n  #\"Multiplied Column2\";\r\nshared #\"Refresh Info\" = let\r\n  Source = DateTime.From(DateTimeZone.FixedUtcNow()),\r\n  #\"Converted to table\" = #table(1, {{Source}}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Converted to table\", {{\"Column1\", type datetime}}),\r\n  #\"Renamed columns\" = Table.RenameColumns(#\"Changed column type\", {{\"Column1\", \"Last Refresh UTC\"}}),\r\n  #\"Added custom\" = Table.AddColumn(#\"Renamed columns\", \"Last Refresh Local\", each #\"Last Refresh Local\", type datetime),\r\n  #\"Added custom 1\" = Table.AddColumn(#\"Added custom\", \"Local Time Zone\", each #\"Local Time Zone\", type text)\r\nin\r\n  #\"Added custom 1\";\r\nshared #\"Local Time Zone\" = let\r\n  #\"Local Time Zone\" = \"America/Chicago\" meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type text, List = {\"Africa/Abidjan\", \"Africa/Accra\", \"Africa/Algiers\", \"Africa/Bissau\", \"Africa/Cairo\", \"Africa/Casablanca\", \"Africa/Ceuta\", \"Africa/El_Aaiun\", \"Africa/Johannesburg\", \"Africa/Juba\", \"Africa/Khartoum\", \"Africa/Lagos\", \"Africa/Maputo\", \"Africa/Monrovia\", \"Africa/Nairobi\", \"Africa/Ndjamena\", \"Africa/Sao_Tome\", \"Africa/Tripoli\", \"Africa/Tunis\", \"Africa/Windhoek\", \"America/Adak\", \"America/Anchorage\", \"America/Araguaina\", \"America/Argentina/Buenos_Aires\", \"America/Argentina/Catamarca\", \"America/Argentina/Cordoba\", \"America/Argentina/Jujuy\", \"America/Argentina/La_Rioja\", \"America/Argentina/Mendoza\", \"America/Argentina/Rio_Gallegos\", \"America/Argentina/Salta\", \"America/Argentina/San_Juan\", \"America/Argentina/San_Luis\", \"America/Argentina/Tucuman\", \"America/Argentina/Ushuaia\", \"America/Asuncion\", \"America/Atikokan\", \"America/Bahia\", \"America/Bahia_Banderas\", \"America/Barbados\", \"America/Belem\", \"America/Belize\", \"America/Blanc-Sablon\", \"America/Boa_Vista\", \"America/Bogota\", \"America/Boise\", \"America/Cambridge_Bay\", \"America/Campo_Grande\", \"America/Cancun\", \"America/Caracas\", \"America/Cayenne\", \"America/Chicago\", \"America/Chihuahua\", \"America/Costa_Rica\", \"America/Creston\", \"America/Cuiaba\", \"America/Curacao\", \"America/Danmarkshavn\", \"America/Dawson\", \"America/Dawson_Creek\", \"America/Denver\", \"America/Detroit\", \"America/Edmonton\", \"America/Eirunepe\", \"America/El_Salvador\", \"America/Fort_Nelson\", \"America/Fortaleza\", \"America/Glace_Bay\", \"America/Goose_Bay\", \"America/Grand_Turk\", \"America/Guatemala\", \"America/Guayaquil\", \"America/Guyana\", \"America/Halifax\", \"America/Havana\", \"America/Hermosillo\", \"America/Indiana/Indianapolis\", \"America/Indiana/Knox\", \"America/Indiana/Marengo\", \"America/Indiana/Petersburg\", \"America/Indiana/Tell_City\", \"America/Indiana/Vevay\", \"America/Indiana/Vincennes\", \"America/Indiana/Winamac\", \"America/Inuvik\", \"America/Iqaluit\", \"America/Jamaica\", \"America/Juneau\", \"America/Kentucky/Louisville\", \"America/Kentucky/Monticello\", \"America/La_Paz\", \"America/Lima\", \"America/Los_Angeles\", \"America/Maceio\", \"America/Managua\", \"America/Manaus\", \"America/Martinique\", \"America/Matamoros\", \"America/Mazatlan\", \"America/Menominee\", \"America/Merida\", \"America/Metlakatla\", \"America/Mexico_City\", \"America/Miquelon\", \"America/Moncton\", \"America/Monterrey\", \"America/Montevideo\", \"America/Nassau\", \"America/New_York\", \"America/Nipigon\", \"America/Nome\", \"America/Noronha\", \"America/North_Dakota/Beulah\", \"America/North_Dakota/Center\", \"America/North_Dakota/New_Salem\", \"America/Nuuk\", \"America/Ojinaga\", \"America/Panama\", \"America/Pangnirtung\", \"America/Paramaribo\", \"America/Phoenix\", \"America/Port-au-Prince\", \"America/Port_of_Spain\", \"America/Porto_Velho\", \"America/Puerto_Rico\", \"America/Punta_Arenas\", \"America/Rainy_River\", \"America/Rankin_Inlet\", \"America/Recife\", \"America/Regina\", \"America/Resolute\", \"America/Rio_Branco\", \"America/Santarem\", \"America/Santiago\", \"America/Santo_Domingo\", \"America/Sao_Paulo\", \"America/Scoresbysund\", \"America/Sitka\", \"America/St_Johns\", \"America/Swift_Current\", \"America/Tegucigalpa\", \"America/Thule\", \"America/Thunder_Bay\", \"America/Tijuana\", \"America/Toronto\", \"America/Vancouver\", \"America/Whitehorse\", \"America/Winnipeg\", \"America/Yakutat\", \"America/Yellowknife\", \"Antarctica/Casey\", \"Antarctica/Davis\", \"Antarctica/DumontDUrville\", \"Antarctica/Macquarie\", \"Antarctica/Mawson\", \"Antarctica/Palmer\", \"Antarctica/Rothera\", \"Antarctica/Syowa\", \"Antarctica/Troll\", \"Antarctica/Vostok\", \"Asia/Almaty\", \"Asia/Amman\", \"Asia/Anadyr\", \"Asia/Aqtau\", \"Asia/Aqtobe\", \"Asia/Ashgabat\", \"Asia/Atyrau\", \"Asia/Baghdad\", \"Asia/Baku\", \"Asia/Bangkok\", \"Asia/Barnaul\", \"Asia/Beirut\", \"Asia/Bishkek\", \"Asia/Brunei\", \"Asia/Chita\", \"Asia/Choibalsan\", \"Asia/Colombo\", \"Asia/Damascus\", \"Asia/Dhaka\", \"Asia/Dili\", \"Asia/Dubai\", \"Asia/Dushanbe\", \"Asia/Famagusta\", \"Asia/Gaza\", \"Asia/Hebron\", \"Asia/Ho_Chi_Minh\", \"Asia/Hong_Kong\", \"Asia/Hovd\", \"Asia/Irkutsk\", \"Asia/Jakarta\", \"Asia/Jayapura\", \"Asia/Jerusalem\", \"Asia/Kabul\", \"Asia/Kamchatka\", \"Asia/Karachi\", \"Asia/Kathmandu\", \"Asia/Khandyga\", \"Asia/Kolkata\", \"Asia/Krasnoyarsk\", \"Asia/Kuala_Lumpur\", \"Asia/Kuching\", \"Asia/Macau\", \"Asia/Magadan\", \"Asia/Makassar\", \"Asia/Manila\", \"Asia/Nicosia\", \"Asia/Novokuznetsk\", \"Asia/Novosibirsk\", \"Asia/Omsk\", \"Asia/Oral\", \"Asia/Pontianak\", \"Asia/Pyongyang\", \"Asia/Qatar\", \"Asia/Qostanay\", \"Asia/Qyzylorda\", \"Asia/Riyadh\", \"Asia/Sakhalin\", \"Asia/Samarkand\", \"Asia/Seoul\", \"Asia/Shanghai\", \"Asia/Singapore\", \"Asia/Srednekolymsk\", \"Asia/Taipei\", \"Asia/Tashkent\", \"Asia/Tbilisi\", \"Asia/Tehran\", \"Asia/Thimphu\", \"Asia/Tokyo\", \"Asia/Tomsk\", \"Asia/Ulaanbaatar\", \"Asia/Urumqi\", \"Asia/Ust-Nera\", \"Asia/Vladivostok\", \"Asia/Yakutsk\", \"Asia/Yangon\", \"Asia/Yekaterinburg\", \"Asia/Yerevan\", \"Atlantic/Azores\", \"Atlantic/Bermuda\", \"Atlantic/Canary\", \"Atlantic/Cape_Verde\", \"Atlantic/Faroe\", \"Atlantic/Madeira\", \"Atlantic/Reykjavik\", \"Atlantic/South_Georgia\", \"Atlantic/Stanley\", \"Australia/Adelaide\", \"Australia/Brisbane\", \"Australia/Broken_Hill\", \"Australia/Currie\", \"Australia/Darwin\", \"Australia/Eucla\", \"Australia/Hobart\", \"Australia/Lindeman\", \"Australia/Lord_Howe\", \"Australia/Melbourne\", \"Australia/Perth\", \"Australia/Sydney\", \"CET\", \"CST6CDT\", \"EET\", \"EST\", \"EST5EDT\", \"Etc/GMT\", \"Etc/GMT+1\", \"Etc/GMT+10\", \"Etc/GMT+11\", \"Etc/GMT+12\", \"Etc/GMT+2\", \"Etc/GMT+3\", \"Etc/GMT+4\", \"Etc/GMT+5\", \"Etc/GMT+6\", \"Etc/GMT+7\", \"Etc/GMT+8\", \"Etc/GMT+9\", \"Etc/GMT-1\", \"Etc/GMT-10\", \"Etc/GMT-11\", \"Etc/GMT-12\", \"Etc/GMT-13\", \"Etc/GMT-14\", \"Etc/GMT-2\", \"Etc/GMT-3\", \"Etc/GMT-4\", \"Etc/GMT-5\", \"Etc/GMT-6\", \"Etc/GMT-7\", \"Etc/GMT-8\", \"Etc/GMT-9\", \"Etc/UTC\", \"Europe/Amsterdam\", \"Europe/Andorra\", \"Europe/Astrakhan\", \"Europe/Athens\", \"Europe/Belgrade\", \"Europe/Berlin\", \"Europe/Brussels\", \"Europe/Bucharest\", \"Europe/Budapest\", \"Europe/Chisinau\", \"Europe/Copenhagen\", \"Europe/Dublin\", \"Europe/Gibraltar\", \"Europe/Helsinki\", \"Europe/Istanbul\", \"Europe/Kaliningrad\", \"Europe/Kiev\", \"Europe/Kirov\", \"Europe/Lisbon\", \"Europe/London\", \"Europe/Luxembourg\", \"Europe/Madrid\", \"Europe/Malta\", \"Europe/Minsk\", \"Europe/Monaco\", \"Europe/Moscow\", \"Europe/Oslo\", \"Europe/Paris\", \"Europe/Prague\", \"Europe/Riga\", \"Europe/Rome\", \"Europe/Samara\", \"Europe/Saratov\", \"Europe/Simferopol\", \"Europe/Sofia\", \"Europe/Stockholm\", \"Europe/Tallinn\", \"Europe/Tirane\", \"Europe/Ulyanovsk\", \"Europe/Uzhgorod\", \"Europe/Vienna\", \"Europe/Vilnius\", \"Europe/Volgograd\", \"Europe/Warsaw\", \"Europe/Zaporozhye\", \"Europe/Zurich\", \"HST\", \"Indian/Chagos\", \"Indian/Christmas\", \"Indian/Cocos\", \"Indian/Kerguelen\", \"Indian/Mahe\", \"Indian/Maldives\", \"Indian/Mauritius\", \"Indian/Reunion\", \"MET\", \"MST\", \"MST7MDT\", \"PST8PDT\", \"Pacific/Apia\", \"Pacific/Auckland\", \"Pacific/Bougainville\", \"Pacific/Chatham\", \"Pacific/Chuuk\", \"Pacific/Easter\", \"Pacific/Efate\", \"Pacific/Enderbury\", \"Pacific/Fakaofo\", \"Pacific/Fiji\", \"Pacific/Funafuti\", \"Pacific/Galapagos\", \"Pacific/Gambier\", \"Pacific/Guadalcanal\", \"Pacific/Guam\", \"Pacific/Honolulu\", \"Pacific/Kiritimati\", \"Pacific/Kosrae\", \"Pacific/Kwajalein\", \"Pacific/Majuro\", \"Pacific/Marquesas\", \"Pacific/Nauru\", \"Pacific/Niue\", \"Pacific/Norfolk\", \"Pacific/Noumea\", \"Pacific/Pago_Pago\", \"Pacific/Palau\", \"Pacific/Pitcairn\", \"Pacific/Pohnpei\", \"Pacific/Port_Moresby\", \"Pacific/Rarotonga\", \"Pacific/Tahiti\", \"Pacific/Tarawa\", \"Pacific/Tongatapu\", \"Pacific/Wake\", \"Pacific/Wallis\", \"WET\"}]\r\nin\r\n  #\"Local Time Zone\";\r\nshared #\"Last Refresh Local\" = let\r\n  Source = Json.Document(Web.Contents(\"http://worldtimeapi.org/api/timezone/\" & #\"Local Time Zone\")),\r\n  #\"Converted to Table\" = Record.ToTable(Source),\r\n  #\"Pivoted Column\" = Table.Pivot(#\"Converted to Table\", List.Distinct(#\"Converted to Table\"[Name]), \"Name\", \"Value\"),\r\n  #\"Removed Other Columns\" = Table.SelectColumns(#\"Pivoted Column\", {\"datetime\"}),\r\n  #\"Split Column by Delimiter\" = Table.SplitColumn(#\"Removed Other Columns\", \"datetime\", Splitter.SplitTextByDelimiter(\".\", QuoteStyle.Csv), {\"Last Refresh\", \"datetime.2\"}),\r\n  #\"Changed Type\" = Table.TransformColumnTypes(#\"Split Column by Delimiter\", {{\"Last Refresh\", type datetime}}),\r\n  #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\", {\"datetime.2\"}),\r\n  Navigation = #\"Removed Columns\"{0}[Last Refresh]\r\nin\r\n  Navigation;\r\nshared Date_Dim = let\r\n  #\"*PARAMETERS*\" = 1,\r\n  FromYear = Date.Year(#\"Dynamic Start Date\"),\r\n  ToYear = Date.Year(#\"Dynamic End Date\"),\r\n  StartofFiscalYear = #\"Fiscal Year Start Month\",\r\n  firstDayofWeek = Day.Monday,\r\n  FromDate = #\"Dynamic Start Date\",\r\n  ToDate = #\"Dynamic End Date\",\r\n  Today = DateTime.LocalNow(),\r\n  #\"*DATE TABLE*\" = 1,\r\n  Source = List.Dates(\r\n    FromDate,\r\n    Duration.Days(ToDate-FromDate)+1,\r\n    #duration(1,0,0,0)\r\n    ),\r\n  #\"Converted to Table\" = Table.FromList(Source, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\r\n  #\"Renamed Columns\" = Table.RenameColumns(#\"Converted to Table\", {{\"Column1\", \"Date\"}}),\r\n  #\"Changed Type\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"Date\", type date}}),\r\n  #\"Inserted Year\" = Table.AddColumn(#\"Changed Type\", \"Year\", each Date.Year([Date]), Int64.Type),\r\n  #\"Inserted Start of Year\" = Table.AddColumn(#\"Inserted Year\", \"Start of Year\", each Date.StartOfYear([Date]), type date),\r\n  #\"Inserted End of Year\" = Table.AddColumn(#\"Inserted Start of Year\", \"End of Year\", each Date.EndOfYear([Date]), type date),\r\n  #\"Inserted Month\" = Table.AddColumn(#\"Inserted End of Year\", \"Month\", each Date.Month([Date]), Int64.Type),\r\n  #\"Inserted Start of Month\" = Table.AddColumn(#\"Inserted Month\", \"Start of Month\", each Date.StartOfMonth([Date]), type date),\r\n  #\"Inserted End of Month\" = Table.AddColumn(#\"Inserted Start of Month\", \"End of Month\", each Date.EndOfMonth([Date]), type date),\r\n  #\"Inserted Days in Month\" = Table.AddColumn(#\"Inserted End of Month\", \"Days in Month\", each Date.DaysInMonth([Date]), Int64.Type),\r\n  #\"Inserted Day\" = Table.AddColumn(#\"Inserted Days in Month\", \"Day\", each Date.Day([Date]), Int64.Type),\r\n  #\"Inserted Day Name\" = Table.AddColumn(#\"Inserted Day\", \"Day Name\", each Date.DayOfWeekName([Date]), type text),\r\n  #\"Inserted Day of Week\" = Table.AddColumn(#\"Inserted Day Name\", \"Day of Week\", each Date.DayOfWeek([Date]), Int64.Type),\r\n  #\"Inserted Day of Year\" = Table.AddColumn(#\"Inserted Day of Week\", \"Day of Year\", each Date.DayOfYear([Date]), Int64.Type),\r\n  #\"Inserted Month Name\" = Table.AddColumn(#\"Inserted Day of Year\", \"Month Name\", each Date.MonthName([Date]), type text),\r\n  #\"Inserted Quarter\" = Table.AddColumn(#\"Inserted Month Name\", \"Quarter\", each Date.QuarterOfYear([Date]), Int64.Type),\r\n  #\"Inserted Start of Quarter\" = Table.AddColumn(#\"Inserted Quarter\", \"Start of Quarter\", each Date.StartOfQuarter([Date]), type date),\r\n  #\"Inserted End of Quarter\" = Table.AddColumn(#\"Inserted Start of Quarter\", \"End of Quarter\", each Date.EndOfQuarter([Date]), type date),\r\n  #\"Inserted Week of Year\" = Table.AddColumn(#\"Inserted End of Quarter\", \"Week of Year\", each Date.WeekOfYear([Date], firstDayofWeek), Int64.Type),\r\n  #\"Inserted Week of Month\" = Table.AddColumn(#\"Inserted Week of Year\", \"Week of Month\", each Date.WeekOfMonth([Date], firstDayofWeek), Int64.Type),\r\n  #\"Inserted Start of Week\" = Table.AddColumn(#\"Inserted Week of Month\", \"Start of Week\", each Date.StartOfWeek([Date], firstDayofWeek), type date),\r\n  #\"Inserted End of Week\" = Table.AddColumn(#\"Inserted Start of Week\", \"End of Week\", each Date.EndOfWeek([Date], firstDayofWeek), type date),\r\n  FiscalMonthBaseIndex = 13 - StartofFiscalYear,\r\n  adjustedFiscalMonthBaseIndex = if(FiscalMonthBaseIndex>=12 or FiscalMonthBaseIndex<0) then 0 else FiscalMonthBaseIndex,\r\n  #\"Added Fiscal Base Date\" = Table.AddColumn(#\"Inserted End of Week\", \"FiscalBaseDate\", each Date.AddMonths([Date], adjustedFiscalMonthBaseIndex), type date),\r\n  #\"Inserted Fiscal Year\" = Table.AddColumn(#\"Added Fiscal Base Date\", \"Fiscal Year\", each Date.Year([FiscalBaseDate]), Int64.Type),\r\n  #\"Inserted Fiscal Quarter\" = Table.AddColumn(#\"Inserted Fiscal Year\", \"Fiscal Quarter\", each Date.QuarterOfYear([FiscalBaseDate]), Int64.Type),\r\n  #\"Inserted Fiscal Month\" = Table.AddColumn(#\"Inserted Fiscal Quarter\", \"Fiscal Month\", each Date.Month([FiscalBaseDate]), Int64.Type),\r\n  #\"Is Past\" = Table.AddColumn(#\"Inserted Fiscal Month\", \"Is Past\", each if [Date] < DateTime.Date(DateTime.LocalNow()) then true else false, type text),\r\n  #\"Quarter Name\" = Table.AddColumn(#\"Is Past\", \"Quarter Name\", each Text.Combine({\"Q\", Text.From([Quarter], \"en-US\")}), type text),\r\n  #\"Fiscal Quarter Name\" = Table.AddColumn(#\"Quarter Name\", \"Fiscal Quarter Name\", each Text.Combine({\"Q\", Text.From([Fiscal Quarter], \"en-US\")}), type text),\r\n  #\"Day Name Shortened\" = Table.AddColumn(#\"Fiscal Quarter Name\", \"Day Name Shortened\", each Text.Start([Day Name], 3), type text),\r\n  #\"Month Name Shortened\" = Table.AddColumn(#\"Day Name Shortened\", \"Month Name Shortened\", each Text.Start([Month Name], 3), type text),\r\n  #\"Month Year\" = Table.AddColumn(#\"Month Name Shortened\", \"Month Year\", each Text.Combine({[Month Name Shortened], \" \", Text.From([Year], \"en-US\")}), type text),\r\n  #\"Fiscal Month Year\" = Table.AddColumn(#\"Month Year\", \"Fiscal Month Year\", each Text.Combine({[Month Name Shortened], \" \", Text.From([Fiscal Year], \"en-US\")}), type text),\r\n  #\"Quarter Year\" = Table.AddColumn(#\"Fiscal Month Year\", \"Quarter Year\", each Text.Combine({[Quarter Name], \" \", Text.From([Year], \"en-US\")}), type text),\r\n  #\"Fiscal Quarter Year\" = Table.AddColumn(#\"Quarter Year\", \"Fiscal Quarter Year\", each Text.Combine({[Fiscal Quarter Name], \" \", Text.From([Fiscal Year], \"en-US\")}), type text),\r\n  #\"==Group Indexes==\" = #\"Fiscal Quarter Year\",\r\n  #\"Grouped rows\" = Table.Group(#\"==Group Indexes==\", {\"Year\", \"Month\"}, {{\"All Rows\", each _, type nullable table}}),\r\n  #\"Added Index\" = Table.AddIndexColumn(#\"Grouped rows\", \"Month Year Index\", 1, 1),\r\n  #\"Expanded All Rows 3\" = Table.ExpandTableColumn(#\"Added Index\", \"All Rows\", {\"Date\", \"Start of Year\", \"End of Year\", \"Start of Month\", \"End of Month\", \"Days in Month\", \"Day\", \"Day Name\", \"Day of Week\", \"Day of Year\", \"Month Name\", \"Quarter\", \"Start of Quarter\", \"End of Quarter\", \"Week of Year\", \"Week of Month\", \"Start of Week\", \"End of Week\", \"FiscalBaseDate\", \"Fiscal Year\", \"Fiscal Quarter\", \"Fiscal Month\", \"Is Past\", \"Quarter Name\", \"Fiscal Quarter Name\", \"Day Name Shortened\", \"Month Name Shortened\", \"Month Year\", \"Fiscal Month Year\", \"Quarter Year\", \"Fiscal Quarter Year\"}, {\"Date\", \"Start of Year\", \"End of Year\", \"Start of Month\", \"End of Month\", \"Days in Month\", \"Day\", \"Day Name\", \"Day of Week\", \"Day of Year\", \"Month Name\", \"Quarter\", \"Start of Quarter\", \"End of Quarter\", \"Week of Year\", \"Week of Month\", \"Start of Week\", \"End of Week\", \"FiscalBaseDate\", \"Fiscal Year\", \"Fiscal Quarter\", \"Fiscal Month\", \"Is Past\", \"Quarter Name\", \"Fiscal Quarter Name\", \"Day Name Shortened\", \"Month Name Shortened\", \"Month Year\", \"Fiscal Month Year\", \"Quarter Year\", \"Fiscal Quarter Year\"}),\r\n  #\"Grouped rows 1\" = Table.Group(#\"Expanded All Rows 3\", {\"Year\", \"Quarter\"}, {{\"All Rows\", each _, type nullable table}}),\r\n  #\"Added Index1\" = Table.AddIndexColumn(#\"Grouped rows 1\", \"Quarter Year Index\", 1, 1),\r\n  #\"Expanded All Rows\" = Table.ExpandTableColumn(#\"Added Index1\", \"All Rows\", {\"Month\", \"Date\", \"Start of Year\", \"End of Year\", \"Start of Month\", \"End of Month\", \"Days in Month\", \"Day\", \"Day Name\", \"Day of Week\", \"Day of Year\", \"Month Name\", \"Start of Quarter\", \"End of Quarter\", \"Week of Year\", \"Week of Month\", \"Start of Week\", \"End of Week\", \"FiscalBaseDate\", \"Fiscal Year\", \"Fiscal Quarter\", \"Fiscal Month\", \"Is Past\", \"Quarter Name\", \"Fiscal Quarter Name\", \"Day Name Shortened\", \"Month Name Shortened\", \"Month Year\", \"Fiscal Month Year\", \"Quarter Year\", \"Fiscal Quarter Year\", \"Month Year Index\"}, {\"Month\", \"Date\", \"Start of Year\", \"End of Year\", \"Start of Month\", \"End of Month\", \"Days in Month\", \"Day\", \"Day Name\", \"Day of Week\", \"Day of Year\", \"Month Name\", \"Start of Quarter\", \"End of Quarter\", \"Week of Year\", \"Week of Month\", \"Start of Week\", \"End of Week\", \"FiscalBaseDate\", \"Fiscal Year\", \"Fiscal Quarter\", \"Fiscal Month\", \"Is Past\", \"Quarter Name\", \"Fiscal Quarter Name\", \"Day Name Shortened\", \"Month Name Shortened\", \"Month Year\", \"Fiscal Month Year\", \"Quarter Year\", \"Fiscal Quarter Year\", \"Month Year Index\"}),\r\n  #\"Grouped rows 2\" = Table.Group(#\"Expanded All Rows\", {\"Year\", \"Week of Year\"}, {{\"All Rows\", each _, type nullable table}}),\r\n  #\"Added Index2\" = Table.AddIndexColumn(#\"Grouped rows 2\", \"Year Week Index\", 1, 1),\r\n  #\"Expanded All Rows 1\" = Table.ExpandTableColumn(#\"Added Index2\", \"All Rows\", {\"Quarter\", \"Month\", \"Date\", \"Start of Year\", \"End of Year\", \"Start of Month\", \"End of Month\", \"Days in Month\", \"Day\", \"Day Name\", \"Day of Week\", \"Day of Year\", \"Month Name\", \"Start of Quarter\", \"End of Quarter\", \"Week of Month\", \"Start of Week\", \"End of Week\", \"FiscalBaseDate\", \"Fiscal Year\", \"Fiscal Quarter\", \"Fiscal Month\", \"Is Past\", \"Quarter Name\", \"Fiscal Quarter Name\", \"Day Name Shortened\", \"Month Name Shortened\", \"Month Year\", \"Fiscal Month Year\", \"Quarter Year\", \"Fiscal Quarter Year\", \"Month Year Index\", \"Quarter Year Index\"}, {\"Quarter\", \"Month\", \"Date\", \"Start of Year\", \"End of Year\", \"Start of Month\", \"End of Month\", \"Days in Month\", \"Day\", \"Day Name\", \"Day of Week\", \"Day of Year\", \"Month Name\", \"Start of Quarter\", \"End of Quarter\", \"Week of Month\", \"Start of Week\", \"End of Week\", \"FiscalBaseDate\", \"Fiscal Year\", \"Fiscal Quarter\", \"Fiscal Month\", \"Is Past\", \"Quarter Name\", \"Fiscal Quarter Name\", \"Day Name Shortened\", \"Month Name Shortened\", \"Month Year\", \"Fiscal Month Year\", \"Quarter Year\", \"Fiscal Quarter Year\", \"Month Year Index\", \"Quarter Year Index\"}),\r\n  #\"Changed column type 1\" = Table.TransformColumnTypes(#\"Expanded All Rows 1\", {{\"Date\", type date}, {\"Month\", Int64.Type}, {\"Fiscal Month\", Int64.Type}, {\"Year\", Int64.Type}, {\"Days in Month\", Int64.Type}, {\"Day\", Int64.Type}, {\"Day of Week\", Int64.Type}, {\"Day of Year\", Int64.Type}, {\"Quarter\", Int64.Type}, {\"Week of Year\", Int64.Type}, {\"Week of Month\", Int64.Type}, {\"Fiscal Year\", Int64.Type}, {\"Fiscal Quarter\", Int64.Type}, {\"Month Year Index\", Int64.Type}, {\"Quarter Year Index\", Int64.Type}, {\"Year Week Index\", Int64.Type}, {\"Fiscal Quarter Year\", type text}, {\"Quarter Year\", type text}, {\"Fiscal Month Year\", type text}, {\"Month Year\", type text}, {\"Month Name Shortened\", type text}, {\"Day Name Shortened\", type text}, {\"Fiscal Quarter Name\", type text}, {\"Quarter Name\", type text}, {\"Month Name\", type text}, {\"Day Name\", type text}, {\"Is Past\", type logical}, {\"End of Week\", type date}, {\"Start of Week\", type date}, {\"End of Quarter\", type date}, {\"Start of Quarter\", type date}, {\"End of Month\", type date}, {\"Start of Month\", type date}, {\"End of Year\", type date}, {\"Start of Year\", type date}}),\r\n  #\"Added Start of Fiscal Year\" = Table.AddColumn(#\"Changed column type 1\", \"Start of Fiscal Year\", each #date((if [Month] < Number.From(StartofFiscalYear) then [Year] - 1 else [Year]), Number.From(StartofFiscalYear), 1), type date),\r\n  #\"Reordered columns\" = Table.ReorderColumns(#\"Added Start of Fiscal Year\", {\"Date\", \"Year\", \"Week of Year\", \"Month\", \"Quarter\", \"Start of Year\", \"End of Year\", \"Start of Month\", \"End of Month\", \"Days in Month\", \"Day\", \"Day Name\", \"Day of Week\", \"Day of Year\", \"Month Name\", \"Start of Quarter\", \"End of Quarter\", \"Week of Month\", \"Start of Week\", \"End of Week\", \"Fiscal Year\", \"Fiscal Quarter\", \"Fiscal Month\", \"Is Past\", \"Quarter Name\", \"Fiscal Quarter Name\", \"Day Name Shortened\", \"Month Name Shortened\", \"Month Year\", \"Fiscal Month Year\", \"Quarter Year\", \"Fiscal Quarter Year\", \"Month Year Index\", \"Quarter Year Index\", \"Year Week Index\", \"Start of Fiscal Year\"}),\r\n  #\"Added Is Current Month\" = Table.AddColumn(#\"Reordered columns\", \"Is Current Month\", each if Date.StartOfMonth(Date.From(DateTime.LocalNow())) = [Start of Month] then true else false, type logical),\r\n  #\"Added Is Current Quarter\" = Table.AddColumn(#\"Added Is Current Month\", \"Is Current Quarter\", each if Date.StartOfQuarter(Date.From(DateTime.LocalNow())) = [Start of Quarter] then true else false, type logical),\r\n  #\"Added Is Current Year\" = Table.AddColumn(#\"Added Is Current Quarter\", \"Is Current Year\", each if [Year] = Date.Year(DateTime.LocalNow()) then true else false, type logical),\r\n  #\"Added Is Current Fiscal Year\" = Table.AddColumn(#\"Added Is Current Year\", \"Is Current Fiscal Year\", each if [Fiscal Year] = (if [Month] < Number.From(StartofFiscalYear) then Date.Year(DateTime.LocalNow()) else Date.Year(DateTime.LocalNow()) + 1) then true else false, type logical),\r\n  #\"Added Month Offset\" = Table.AddColumn(#\"Added Is Current Fiscal Year\", \"Month Offset\", each (([Year]-Date.Year(Today))*12)\r\n+([Month]-Date.Month(Today)), Int64.Type),\r\n  #\"Added Quarter Offset\" = Table.AddColumn(#\"Added Month Offset\", \"Quarter Offset\", each (([Year]-Date.Year(Today))*4)\r\n+([Quarter]-Date.QuarterOfYear(Today)), Int64.Type),\r\n  #\"Added Year Offset\" = Table.AddColumn(#\"Added Quarter Offset\", \"Year Offset\", each [Year]-Date.Year(Today), Int64.Type),\r\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Added Year Offset\", {{\"FiscalBaseDate\", type text}}),\r\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"FiscalBaseDate\", null}})\r\nin\r\n  #\"Replace errors\";\r\nshared #\"Start Date\" = let\r\n  #\"Start Year\" = #date(2017, 1, 1) meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type date, List = {#date(2000, 1, 1), #date(2001, 1, 1), #date(2002, 1, 1), #date(2003, 1, 1), #date(2004, 1, 1), #date(2005, 1, 1), #date(2006, 1, 1), #date(2007, 1, 1), #date(2008, 1, 1), #date(2009, 1, 1), #date(2010, 1, 1), #date(2011, 1, 1), #date(2012, 1, 1), #date(2013, 1, 1), #date(2014, 1, 1), #date(2015, 1, 1), #date(2016, 1, 1), #date(2017, 1, 1), #date(2018, 1, 1), #date(2019, 1, 1), #date(2020, 1, 1), #date(2021, 1, 1), #date(2022, 1, 1), #date(2023, 1, 1), #date(2024, 1, 1), #date(2025, 1, 1), #date(2026, 1, 1), #date(2027, 1, 1), #date(2028, 1, 1), #date(2029, 1, 1), #date(2030, 1, 1)}, DefaultValue = 2020]\r\nin\r\n  #\"Start Year\";\r\nshared #\"End Date\" = let\r\n  #\"End Year\" = #date(2025, 12, 31) meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type date, List = {#date(2000, 12, 31), #date(2001, 12, 31), #date(2002, 12, 31), #date(2003, 12, 31), #date(2004, 12, 31), #date(2005, 12, 31), #date(2006, 12, 31), #date(2007, 12, 31), #date(2008, 12, 31), #date(2009, 12, 31), #date(2010, 12, 31), #date(2011, 12, 31), #date(2012, 12, 31), #date(2013, 12, 31), #date(2014, 12, 31), #date(2015, 12, 31), #date(2016, 12, 31), #date(2017, 12, 31), #date(2018, 12, 31), #date(2019, 12, 31), #date(2020, 12, 31), #date(2021, 12, 31), #date(2022, 12, 31), #date(2023, 12, 31), #date(2024, 12, 31), #date(2025, 12, 31), #date(2026, 12, 31), #date(2027, 12, 31), #date(2028, 12, 31), #date(2029, 12, 31), #date(2030, 12, 31)}, DefaultValue = #date(2025, 12, 31)]\r\nin\r\n  #\"End Year\";\r\nshared #\"Years Back\" = let\r\n  #\"Years Back\" = 10 meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type number, List = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, DefaultValue = 1]\r\nin\r\n  #\"Years Back\";\r\nshared #\"Years Forward\" = let\r\n  #\"Years Forward\" = 5 meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type number, List = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, DefaultValue = 5]\r\nin\r\n  #\"Years Forward\";\r\nshared #\"Fiscal Year Start Month\" = let\r\n  #\"Start of Fiscal Year Month\" = 7 meta [IsParameterQuery = true, IsParameterQueryRequired = true, Type = type number, List = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}, DefaultValue = 7]\r\nin\r\n  #\"Start of Fiscal Year Month\";\r\nshared #\"Dynamic Start Date\" = let\r\n  Source = #date(Date.Year(DateTimeZone.FixedUtcNow()) - #\"Years Back\",1,1)\r\nin\r\n  Source;\r\nshared #\"Dynamic End Date\" = let\r\n  Source = #date(Date.Year(DateTimeZone.FixedUtcNow()) + #\"Years Forward\",12,31)\r\nin\r\n  Source;\r\nshared TOPN = let\r\n  TOPN = 1000 meta [IsParameterQuery = true, IsParameterQueryRequired = false, Type = type number, List = {100, 1000, 10000, 100000, 1000000000000}, DefaultValue = 1000]\r\nin\r\n  TOPN;\r\n"},"annotations":[{"name":"pbi:QueryGroups","value":"[{\"id\":\"02a394db-c514-4acd-829b-a0946840d68a\",\"name\":\"Time\",\"description\":\"\",\"parentId\":null,\"order\":1},{\"id\":\"16c59665-03d8-41d7-b6fe-3da6417449cf\",\"name\":\"Date\",\"description\":\"\",\"parentId\":null,\"order\":0},{\"id\":\"c1437975-acc3-420d-9534-0d1af5ee9e0e\",\"name\":\"Dev Help\",\"description\":\"\",\"parentId\":null,\"order\":1}]"}],"entities":[{"$type":"LocalEntity","name":"Time_Dim","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Time_Dim.csv"},"attributes":[{"name":"Time","dataType":"time"},{"name":"Start of Hour","dataType":"time"},{"name":"End of Hour","dataType":"time"},{"name":"Hour","dataType":"double"},{"name":"Minute","dataType":"double"},{"name":"Second","dataType":"double"},{"name":"AM/PM","dataType":"string"},{"name":"Hour Label","dataType":"string"},{"name":"Minute Label","dataType":"string"},{"name":"Second Label","dataType":"string"},{"name":"Hour Bin 12","dataType":"double"},{"name":"Hour Bin 8","dataType":"int64"},{"name":"Hour Bin 6","dataType":"int64"},{"name":"Hour Bin 4","dataType":"int64"},{"name":"Hour Bin 3","dataType":"int64"},{"name":"Hour Bin 2","dataType":"int64"},{"name":"Minute Bin 30","dataType":"double"},{"name":"Minute Bin 15","dataType":"double"},{"name":"Minute Bin 10","dataType":"double"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2021-04-09T17:01:24.57952+00:00","location":"https://wabicusapcdsap1.blob.core.windows.net:443/bba6d790-2b21-4c69-beaa-0cce5335cd5a/Time_Dim.csv?snapshot=2021-04-09T17%3A01%3A24.3564929Z"}]},{"$type":"LocalEntity","name":"Refresh Info","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Refresh%20Info.csv"},"attributes":[{"name":"Last Refresh UTC","dataType":"dateTime"},{"name":"Last Refresh Local","dataType":"dateTime"},{"name":"Local Time Zone","dataType":"string"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2021-04-09T17:01:45.4679727+00:00","location":"https://wabicusapcdsap1.blob.core.windows.net:443/bba6d790-2b21-4c69-beaa-0cce5335cd5a/Refresh%20Info.csv?snapshot=2021-04-09T17%3A01%3A45.3834187Z"}]},{"$type":"LocalEntity","name":"Date_Dim","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Date_Dim.csv"},"attributes":[{"name":"Date","dataType":"date"},{"name":"Year","dataType":"int64"},{"name":"Week of Year","dataType":"int64"},{"name":"Month","dataType":"int64"},{"name":"Quarter","dataType":"int64"},{"name":"Start of Year","dataType":"date"},{"name":"End of Year","dataType":"date"},{"name":"Start of Month","dataType":"date"},{"name":"End of Month","dataType":"date"},{"name":"Days in Month","dataType":"int64"},{"name":"Day","dataType":"int64"},{"name":"Day Name","dataType":"string"},{"name":"Day of Week","dataType":"int64"},{"name":"Day of Year","dataType":"int64"},{"name":"Month Name","dataType":"string"},{"name":"Start of Quarter","dataType":"date"},{"name":"End of Quarter","dataType":"date"},{"name":"Week of Month","dataType":"int64"},{"name":"Start of Week","dataType":"date"},{"name":"End of Week","dataType":"date"},{"name":"FiscalBaseDate","dataType":"string"},{"name":"Fiscal Year","dataType":"int64"},{"name":"Fiscal Quarter","dataType":"int64"},{"name":"Fiscal Month","dataType":"int64"},{"name":"Is Past","dataType":"boolean"},{"name":"Quarter Name","dataType":"string"},{"name":"Fiscal Quarter Name","dataType":"string"},{"name":"Day Name Shortened","dataType":"string"},{"name":"Month Name Shortened","dataType":"string"},{"name":"Month Year","dataType":"string"},{"name":"Fiscal Month Year","dataType":"string"},{"name":"Quarter Year","dataType":"string"},{"name":"Fiscal Quarter Year","dataType":"string"},{"name":"Month Year Index","dataType":"int64"},{"name":"Quarter Year Index","dataType":"int64"},{"name":"Year Week Index","dataType":"int64"},{"name":"Start of Fiscal Year","dataType":"date"},{"name":"Is Current Month","dataType":"boolean"},{"name":"Is Current Quarter","dataType":"boolean"},{"name":"Is Current Year","dataType":"boolean"},{"name":"Is Current Fiscal Year","dataType":"boolean"},{"name":"Month Offset","dataType":"int64"},{"name":"Quarter Offset","dataType":"int64"},{"name":"Year Offset","dataType":"int64"}],"partitions":[{"name":"FullRefreshPolicyPartition","refreshTime":"2021-04-09T17:01:17.8721526+00:00","location":"https://wabicusapcdsap1.blob.core.windows.net:443/bba6d790-2b21-4c69-beaa-0cce5335cd5a/Date_Dim.csv?snapshot=2021-04-09T17%3A01%3A17.6487201Z"}]}]}